(function () { function a (a, b = () => !1) { chrome.storage.local.get(a, b) } function b (a, b = () => !1) { chrome.storage.local.set(a) } const c = { conditions: [new chrome.declarativeContent.PageStateMatcher({ css: ["div"] })], actions: [new chrome.declarativeContent.ShowPageAction] }; let d; a("cssGetters", ({ cssGetters: a }) => { d = a }), chrome.storage.onChanged.addListener(b => { "cssGetters" in b && b.cssGetters.newValue && a("cssGetters", ({ cssGetters: a }) => { d = a }) }), chrome.webNavigation.onDOMContentLoaded.addListener(() => { b({ hasScriptRunOnPage: !1 }) }), chrome.tabs.onActivated.addListener(function () { b({ hasScriptRunOnPage: !1 }) }), chrome.runtime.onMessage.addListener(function (a, c, e) { switch (a.action) { case "getValues": e({ getters: d }); break; case "getState": console.log(a.payload), b({ [c.tab.url]: a.payload, currentResults: a.payload }); break; default: console.log(a); } }), chrome.runtime.onInstalled.addListener(function () { chrome.declarativeContent.onPageChanged.removeRules(void 0, function () { chrome.declarativeContent.onPageChanged.addRules([c]), b({ hasScriptRunOnPage: !1, pageRefreshed: !1, cssGetters: ["fontFamily", "backgroundColor", "color"] }) }) }) })();